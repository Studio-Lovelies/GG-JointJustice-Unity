name: Generate game builds
on: 
  push:
    branches:
      - develop
      - master
      - releasecandidate/*
  pull_request:
    branches:
      - develop
      - master
      - releasecandidate/*
  workflow_dispatch:
    inputs:
      createRelease:
        description: 'Upload to GitHub Releases and itch.io?'
        required: true
        default: 'false'

concurrency: 
  group: ${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Get version number from ProjectSettings/ProjectSettings.asset -> PlayerSettings/bundleVersion
  extractVersionNumber:
    name: Extract project version number
    runs-on: ubuntu-latest
    outputs:
      version_number: ${{ steps.extractVersionNumber_job.outputs.version_number }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Attempt extraction  
        id: extractVersionNumber_job
        working-directory: unity-ggjj/
        run: |
            version_number=$(grep 'bundleVersion: ' ./ProjectSettings/ProjectSettings.asset)
            version_number=${version_number:17}
            echo "Version number: $version_number"
            echo "::set-output name=version_number::$version_number"

  # Unity build
  checkLicense:
    name: Check if UNITY_SERIAL is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_unity_serial_set: ${{ steps.checkLicense_job.outputs.is_unity_serial_set }}
    steps:
      - name: Check whether Unity activation requests should be done
        id: checkLicense_job
        run: |
            echo "Skip activation job: ${{ secrets.UNITY_SERIAL != '' }}"
            echo "::set-output name=is_unity_serial_set::${{ secrets.UNITY_SERIAL != '' }}"
  
  activation:
    name: Request activation file ðŸ”‘
    needs: [checkLicense]
    if: needs.checkLicense.outputs.is_unity_serial_set == 'false'
    runs-on: ubuntu-latest
    steps:
      - name: Request manual activation file
        id: getManualLicenseFile
        uses: game-ci/unity-request-activation-file@v2.0-alpha-1
        with:
          unityVersion: 2020.3.15f2

      - name: Expose as artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.getManualLicenseFile.outputs.filePath }}
          path: ${{ steps.getManualLicenseFile.outputs.filePath }}

  unityTestEditMode: 
    name: Run EditMode tests for Unity project
    needs: [checkLicense]
    if: needs.checkLicense.outputs.is_unity_serial_set == 'true'
    runs-on: ubuntu-latest
    permissions:
      checks: write # allows dependabot PRs to set pull request checks
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Remove unity-ggjj/Assets/Tests/PlayModeTests/ folder
        run: rm -rf unity-ggjj/Assets/Tests/PlayModeTests/

      - name: Run tests
        uses: vimaster/unity-test-runner@v2.1.1
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity-ggjj/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: EditMode
          checkName: Test Results - EditMode
          coverageOptions: generateAdditionalMetrics;assemblyFilters:+GG-JointJustice

      - name: Upload XML report to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ failure() || success() }}
        with:
          name: EditMode
          flags: EditMode
          token: ${{ secrets.CODECOV_TOKEN }}
          files: CodeCoverage/**/*.xml

      - name: Store test artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Test Results - EditMode
          path: artifacts

  unityTestPlayModeScripts:
    name: Run PlayMode Scripts tests for Unity project
    needs: [checkLicense]
    if: needs.checkLicense.outputs.is_unity_serial_set == 'true'
    runs-on: ubuntu-latest
    permissions:
      checks: write # allows dependabot PRs to set pull request checks
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Remove other test folders
        run: |
          rm -rf unity-ggjj/Assets/Tests/EditModeTests
          rm -rf unity-ggjj/Assets/Tests/PlayModeTests/Scenes
          rm -rf unity-ggjj/Assets/Tests/PlayModeTests/Playthrough

      - name: Run tests
        uses: vimaster/unity-test-runner@v2.1.1
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity-ggjj/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          checkName: Test Results - PlayMode Scripts
          coverageOptions: generateAdditionalMetrics;assemblyFilters:+GG-JointJustice

      - name: Upload XML report to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ failure() || success() }}
        with:
          name: PlayMode Scripts
          flags: PlayModeScripts
          token: ${{ secrets.CODECOV_TOKEN }}
          files: CodeCoverage/**/*.xml

      - name: Store test artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Test Results - PlayMode Scripts
          path: artifacts

      - name: Store Screenshots
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Screenshots - PlayMode Scripts
          path: unity-ggjj/TestRunArtifacts

  unityTestPlayModeScenes:
    name: Run PlayMode Scenes tests for Unity project
    needs: [checkLicense]
    if: needs.checkLicense.outputs.is_unity_serial_set == 'true'
    runs-on: ubuntu-latest
    permissions:
      checks: write # allows dependabot PRs to set pull request checks
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Remove other test folders
        run: |
          rm -rf unity-ggjj/Assets/Tests/EditModeTests
          rm -rf unity-ggjj/Assets/Tests/PlayModeTests/Scripts
          rm -rf unity-ggjj/Assets/Tests/PlayModeTests/Playthrough

      - name: Run tests
        uses: vimaster/unity-test-runner@v2.1.1
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity-ggjj/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          checkName: Test Results - PlayMode Scenes
          coverageOptions: generateAdditionalMetrics;assemblyFilters:+GG-JointJustice

      - name: Upload XML report to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ failure() || success() }}
        with:
          name: PlayMode Scenes
          flags: PlayModeScenes
          token: ${{ secrets.CODECOV_TOKEN }}
          files: CodeCoverage/**/*.xml

      - name: Store test artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Test Results - PlayMode Scenes
          path: artifacts

      - name: Store Screenshots
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Screenshots - PlayMode Scenes
          path: TestRunArtifacts

  unityTestPlayModePlaythrough:
    name: Run PlayMode Playthrough tests for Unity project
    needs: [checkLicense]
    if: needs.checkLicense.outputs.is_unity_serial_set == 'true'
    runs-on: ubuntu-latest
    permissions:
      checks: write # allows dependabot PRs to set pull request checks
      contents: read
      pull-requests: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Remove other test folders
        run: |
          rm -rf unity-ggjj/Assets/Tests/EditModeTests
          rm -rf unity-ggjj/Assets/Tests/PlayModeTests/Scripts
          rm -rf unity-ggjj/Assets/Tests/PlayModeTests/Scenes

      - name: Run tests
        uses: vimaster/unity-test-runner@v2.1.1
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity-ggjj/
          githubToken: ${{ secrets.GITHUB_TOKEN }}
          testMode: PlayMode
          checkName: Test Results - PlayMode Playthrough
          coverageOptions: generateAdditionalMetrics;assemblyFilters:+GG-JointJustice

      - name: Upload XML report to Codecov
        uses: codecov/codecov-action@v3
        if: ${{ failure() || success() }}
        with:
          name: PlayMode Playthrough
          flags: PlayModePlaythrough
          token: ${{ secrets.CODECOV_TOKEN }}
          files: CodeCoverage/**/*.xml

      - name: Store test artifacts
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Test Results - PlayMode Playthrough
          path: artifacts

      - name: Store Screenshots
        uses: actions/upload-artifact@v3
        if: ${{ failure() || success() }}
        with:
          name: Screenshots - PlayMode Playthrough
          path: TestRunArtifacts

  unityBuild:
    name: Build for ${{ matrix.targetPlatform.outputName }}
    needs: [extractVersionNumber, checkLicense]
    if: needs.checkLicense.outputs.is_unity_serial_set == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        targetPlatform: [ 
          { unityPlatform: "StandaloneOSX",       outputName: "macOS"       }, 
          { unityPlatform: "StandaloneWindows",   outputName: "Windows-x86" }, 
          { unityPlatform: "StandaloneWindows64", outputName: "Windows-x64" }, 
          { unityPlatform: "StandaloneLinux64",   outputName: "Linux-x64"   },
          { unityPlatform: "WebGL",               outputName: "WebGL"       } 
        ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Create LFS file list
        run: git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: .git/lfs
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}

      - name: Git LFS Pull
        run: |
          git lfs pull
          git add .
          git reset --hard

      - name: Restore Library cache
        uses: actions/cache@v3
        with:
          path: unity-ggjj/Library
          key: Library-${{ hashFiles('unity-ggjj/Assets/**', 'unity-ggjj/Packages/**', 'unity-ggjj/ProjectSettings/**') }}
          restore-keys: |
            unity-ggjj/Library-

      - name: Build project
        uses: game-ci/unity-builder@v2
        env:
          UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        with:
          projectPath: unity-ggjj/
          targetPlatform: ${{ matrix.targetPlatform.unityPlatform }}
          buildName: 'Game Grumps - Joint Justice'

      - name: Upload '${{ matrix.targetPlatform.outputName }}' artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.targetPlatform.outputName }}-v${{ github.run_number }}
          path: build/${{ matrix.targetPlatform.unityPlatform }}

  # Releases
  checkIfTagExists:
    name: Check if tag exists
    needs: [extractVersionNumber]
    if: (github.event.inputs.createRelease == 'true' || (github.ref == 'refs/heads/master' && github.event_name == 'push'))
    runs-on: ubuntu-latest
    steps:
    - name: Check if tag exists
      uses: mukunku/tag-exists-action@v1.2.0
      id: checkTag
      with: 
        tag: ${{ needs.extractVersionNumber.outputs.version_number }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: Fail if tag already exists
      run: | 
        echo "Tag '${{ needs.extractVersionNumber.outputs.version_number }}' already exists: ${{ steps.checkTag.outputs.exists }}"
        exit $([ "${{ steps.checkTag.outputs.exists }}" = 'true' ] && echo 1 || echo 0)


# GitHub Releases
  createGitHubRelease:
    name: Create GitHub Release
    needs: [extractVersionNumber, checkIfTagExists, unityBuild]
    if: (github.event.inputs.createRelease == 'true' || (github.ref == 'refs/heads/master' && github.event_name == 'push'))
    runs-on: ubuntu-latest
    steps:
      - name: Download macOS
        uses: actions/download-artifact@v3
        with:
          name: macOS-v${{ needs.extractVersionNumber.outputs.version_number }}
          path: build/macOS-v${{ needs.extractVersionNumber.outputs.version_number }}
      - name: Download Windows-x86
        uses: actions/download-artifact@v3
        with:
          name: Windows-x86-v${{ needs.extractVersionNumber.outputs.version_number }}
          path: build/Windows-x86-v${{ needs.extractVersionNumber.outputs.version_number }}
      - name: Download Windows-x64
        uses: actions/download-artifact@v3
        with:
          name: Windows-x64-v${{ needs.extractVersionNumber.outputs.version_number }}
          path: build/Windows-x64-v${{ needs.extractVersionNumber.outputs.version_number }}
      - name: Download Linux-x64
        uses: actions/download-artifact@v3
        with:
          name: Linux-x64-v${{ needs.extractVersionNumber.outputs.version_number }}
          path: build/Linux-x64-v${{ needs.extractVersionNumber.outputs.version_number }}
      - name: Download WebGL
        uses: actions/download-artifact@v3
        with:
          name: WebGL-v${{ needs.extractVersionNumber.outputs.version_number }}
          path: build/WebGL-v${{ needs.extractVersionNumber.outputs.version_number }}
          
      - name: Zip macOS
        run: zip -r "build/macOS-v${{ needs.extractVersionNumber.outputs.version_number }}.zip"       "build/macOS-v${{ needs.extractVersionNumber.outputs.version_number }}"
      - name: Zip Windows-x86
        run: zip -r "build/Windows-x86-v${{ needs.extractVersionNumber.outputs.version_number }}.zip" "build/Windows-x86-v${{ needs.extractVersionNumber.outputs.version_number }}"
      - name: Zip Windows-x64
        run: zip -r "build/Windows-x64-v${{ needs.extractVersionNumber.outputs.version_number }}.zip" "build/Windows-x64-v${{ needs.extractVersionNumber.outputs.version_number }}"
      - name: Zip Linux-x64
        run: zip -r "build/Linux-x64-v${{ needs.extractVersionNumber.outputs.version_number }}.zip"   "build/Linux-x64-v${{ needs.extractVersionNumber.outputs.version_number }}"
      - name: Zip WebGL
        run: zip -r "build/WebGL-v${{ needs.extractVersionNumber.outputs.version_number }}.zip"       "build/WebGL-v${{ needs.extractVersionNumber.outputs.version_number }}"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1.12.0
        with:
          # glob-files need to be escaped
          artifacts: |
            build/macOS-v${{ needs.extractVersionNumber.outputs.version_number }}.zip,
            build/Windows-x86-v${{ needs.extractVersionNumber.outputs.version_number }}.zip,
            build/Windows-x64-v${{ needs.extractVersionNumber.outputs.version_number }}.zip,
            build/Linux-x64-v${{ needs.extractVersionNumber.outputs.version_number }}.zip,
            build/WebGL-v${{ needs.extractVersionNumber.outputs.version_number }}.zip
          artifactErrorsFailBuild: true
          tag:  ${{ needs.extractVersionNumber.outputs.version_number }}
          name: "Release #${{ needs.extractVersionNumber.outputs.version_number }}"
          token: ${{ secrets.GITHUB_TOKEN }}
            
  # itch.io uploader
  checkItchIO:
    name: Check if ITCHIO_APIKEY is set in github secrets
    runs-on: ubuntu-latest
    outputs:
      is_ITCHIO_set: ${{ steps.checkItchIO_job.outputs.is_ITCHIO_set }}
    steps:
      - name: Check whether an itch.io build should be pushed
        id: checkItchIO_job
        run: |
            echo "Push itch.io build: ${{ secrets.ITCHIO_APIKEY != '' && secrets.ITCHIO_USERNAME != '' && secrets.ITCHIO_PROJECTNAME != '' }}"
            echo "::set-output name=is_ITCHIO_set::${{ secrets.ITCHIO_APIKEY != '' && secrets.ITCHIO_USERNAME != '' && secrets.ITCHIO_PROJECTNAME != '' }}"
      
  createItchIORelease:
    name: Create/update itch.io for ${{ matrix.platforms.outputName }}
    needs: [extractVersionNumber, checkIfTagExists, unityBuild, checkItchIO]
    if: (github.event.inputs.createRelease == 'true' || (github.ref == 'refs/heads/master' && github.event_name == 'push')) && needs.checkItchIO.outputs.is_ITCHIO_set == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platforms: [ 
          { outputName: "macOS",       itchIOChannel: "mac"         },
          { outputName: "Windows-x86", itchIOChannel: "windows-x86" }, 
          { outputName: "Windows-x64", itchIOChannel: "windows-x64" }, 
          { outputName: "Linux-x64",   itchIOChannel: "linux"       },
          { outputName: "WebGL",       itchIOChannel: "webGL"       }
        ]
    steps:
      - name: Download ${{ matrix.platforms.outputName }}
        uses: actions/download-artifact@v3
        with:
          name: ${{ matrix.platforms.outputName }}-v${{ needs.extractVersionNumber.outputs.version_number }}
          path: build/${{ matrix.platforms.outputName }}-v${{ needs.extractVersionNumber.outputs.version_number }}
      - name: Create itch.io '${{ matrix.platforms.itchIOChannel }}' Release
        uses: josephbmanley/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.ITCHIO_APIKEY }}
          CHANNEL: ${{ matrix.platforms.itchIOChannel }}
          ITCH_GAME: ${{ secrets.ITCHIO_PROJECTNAME }}
          ITCH_USER: ${{ secrets.ITCHIO_USERNAME }}
          PACKAGE: build/${{ matrix.platforms.outputName }}-v${{ needs.extractVersionNumber.outputs.version_number }}
          VERSION: ${{ needs.extractVersionNumber.outputs.version_number }}
